m <- update(illusion1_ebbinghaus_err, formula=f$conditional, newdata=dat, prior=priors)
m
parameters::parameters(m)
param <- parameters::parameters(m)
out <- data.frame()
data=dat
model <- illusion1_ebbinghaus_err
param <- parameters::parameters(m)
param
parameters::parameters(m) |>
filter(str_detect(Parmeter, "Illusion_EffectIncongruent"))
parameters::parameters(m) |>
filter(str_detect(Parameter, "Illusion_EffectIncongruent"))
parameters::parameters(m) |>
filter(str_detect(Parameter, "Illusion_EffectIncongruent:"))
param <- parameters::parameters(m) |>
filter(str_detect(Parameter, "Illusion_EffectIncongruent:")) |>
mutate(Parameter = case_when(
str_detect(Parameter, "Illusion_Difference:") ~ "Interaction",
str_detect(Parameter, "_Strength", "Strength"),
TRUE ~ "Diff"
))
param <- parameters::parameters(m) |>
filter(str_detect(Parameter, "Illusion_EffectIncongruent:")) |>
mutate(Parameter = case_when(
str_detect(Parameter, "Illusion_Difference:") ~ "Interaction",
str_detect(Parameter, "_Strength") ~ "Strength",
TRUE ~ "Diff"
))
param
parameters::parameters(m) |>
filter(str_detect(Parameter, "Illusion_EffectIncongruent:"))
parameters::parameters(m) |>
filter(str_detect(Parameter, "Illusion_EffectIncongruent:")) |>
mutate(Parameter = case_when(
str_detect(Parameter, "Illusion_Difference:") ~ "Interaction",
str_detect(Parameter, "_Strength") ~ "Strength",
TRUE ~ "Diff"
))
param <- parameters::parameters(m) |>
filter(str_detect(Parameter, "Illusion_EffectIncongruent:")) |>
mutate(Parameter = ifelse(
str_detect(Parameter, "Illusion_Difference:"),  "Interaction",
str_detect(Parameter, "_Strength"), "Strength", "Diff"
))
param <- parameters::parameters(m) |>
filter(str_detect(Parameter, "Illusion_EffectIncongruent:")) |>
mutate(Parameter = ifelse(
str_detect(Parameter, "Illusion_Difference:"),  "Interaction",
ifelse(str_detect(Parameter, "_Strength"), "Strength", "Diff")
))
param
parameters::parameters(m) |>
filter(str_detect(Parameter, "Illusion_EffectIncongruent:")) |>
mutate(Parameter = ifelse(
str_detect(Parameter, "Illusion_Difference:"),
"Interaction",
"Diff"))
param <- parameters::parameters(m) |>
filter(str_detect(Parameter, "Illusion_EffectIncongruent:")) |>
mutate(Parameter = case_when(
str_detect(Parameter, "Illusion_Difference:") ~ "Interaction",
str_detect(Parameter, "_Strength", "Strength"),
TRUE ~ "Diff"
))
param <- parameters::parameters(m) |>
filter(str_detect(Parameter, "Illusion_EffectIncongruent:")) |>
mutate(Parameter = case_when(
str_detect(Parameter, "Illusion_Difference:") ~ "Interaction",
str_detect(Parameter, "_Strength") ~ "Strength",
TRUE ~ "Diff"
))
as.data.frame(param)
param <- parameters::parameters(m) |>
filter(str_detect(Parameter, "Illusion_EffectIncongruent:")) |>
mutate(Parameter = case_when(
str_detect(Parameter, "Illusion_Difference:") ~ "Interaction",
str_detect(Parameter, "_Strength") ~ "Strength",
TRUE ~ "Diff"
)) |>
select(Parameter, Median) |>
pivot_wider(names_from = "Parameter", values_from = "Median")
param
parameters::parameters(m) |>
filter(str_detect(Parameter, "Illusion_EffectIncongruent:")) |>
mutate(Parameter = case_when(
str_detect(Parameter, "Illusion_Difference:") ~ "Interaction",
str_detect(Parameter, "_Strength") ~ "Strength",
TRUE ~ "Diff"
)) |>
select(Parameter, Median) |>
pivot_wider(names_from = "Parameter", values_from = "Median") |>
data_addsuffix(paste0("_P", prior_scale))
prior_scale = 1
parameters::parameters(m) |>
filter(str_detect(Parameter, "Illusion_EffectIncongruent:")) |>
mutate(Parameter = case_when(
str_detect(Parameter, "Illusion_Difference:") ~ "Interaction",
str_detect(Parameter, "_Strength") ~ "Strength",
TRUE ~ "Diff"
)) |>
select(Parameter, Median) |>
pivot_wider(names_from = "Parameter", values_from = "Median") |>
data_addsuffix(paste0("_P", prior_scale))
family <- insight::find_response(model)
parameters::parameters(m) |>
filter(str_detect(Parameter, "Illusion_EffectIncongruent:")) |>
mutate(Parameter = case_when(
str_detect(Parameter, "Illusion_Difference:") ~ "Interaction",
str_detect(Parameter, "_Strength") ~ "Strength",
TRUE ~ "Diff"
)) |>
select(Parameter, Median) |>
pivot_wider(names_from = "Parameter", values_from = "Median") |>
data_addsuffix(paste0("_", family, "_P" prior_scale))
parameters::parameters(m) |>
filter(str_detect(Parameter, "Illusion_EffectIncongruent:")) |>
mutate(Parameter = case_when(
str_detect(Parameter, "Illusion_Difference:") ~ "Interaction",
str_detect(Parameter, "_Strength") ~ "Strength",
TRUE ~ "Diff"
)) |>
select(Parameter, Median) |>
pivot_wider(names_from = "Parameter", values_from = "Median") |>
data_addsuffix(paste0("_", family, "_P", prior_scale))
get_params <- function(model, data, prior_scale = 1) {
family <- insight::find_response(model)
f <- insight::find_formula(model)
priors <- bayestestR::model_to_priors(model,
scale_multiply = prior_scale)
priors <- brms::validate_prior(priors[1:9, ],
f$conditional,
data=data)
m <- update(model, formula=f$conditional, newdata=data, prior=priors)
parameters::parameters(m) |>
filter(str_detect(Parameter, "Illusion_EffectIncongruent:")) |>
mutate(Parameter = case_when(
str_detect(Parameter, "Illusion_Difference:") ~ "Interaction",
str_detect(Parameter, "_Strength") ~ "Strength",
TRUE ~ "Diff"
)) |>
select(Parameter, Median) |>
pivot_wider(names_from = "Parameter", values_from = "Median") |>
data_addsuffix(paste0("_", family, "_P", prior_scale))
}
rez
rez <- get_params(
illusion1_ebbinghaus_err,
data = filter(df, Illusion_Type == "Ebbinghaus", Participant == sub),
prior_scale = prior_scale)
rez <- get_params(
illusion1_ebbinghaus_err,
data = filter(df, Illusion_Type == "Ebbinghaus", Participant == sub),
prior_scale = prior_scale) |>
data_addprefix("S2_Ebbinghaus_")
rez
load("models/illusion1_ebbinghaus_err.Rdata")
load("models/illusion1_ebbinghaus_err.Rdata")
load("models/illusion1_ebbinghaus_rt.Rdata")
load("models/illusion1_mullerlyer_err.Rdata")
load("models/illusion1_mullerlyer_rt.Rdata")
load("models/illusion1_verticalhorizontal_err.Rdata")
load("models/illusion1_verticalhorizontal_rt.Rdata")
rez1 <- get_params(
illusion1_ebbinghaus_err,
data = filter(df, Illusion_Type == "Ebbinghaus", Participant == sub),
prior_scale = prior_scale) |>
data_addprefix("S2_Ebbinghaus_")
rez2 <- get_params(
illusion1_ebbinghaus_rt,
data = filter(df, Illusion_Type == "Ebbinghaus", Participant == sub),
prior_scale = prior_scale) |>
data_addprefix("S2_Ebbinghaus_")
rez3 <- get_params(
illusion1_mullerlyer_err,
data = filter(df, Illusion_Type == "MullerLyer", Participant == sub),
prior_scale = prior_scale) |>
data_addprefix("S2_MullerLyer_")
rez4 <- get_params(
illusion1_mullerlyer_rt,
data = filter(df, Illusion_Type == "MullerLyer", Participant == sub),
prior_scale = prior_scale) |>
data_addprefix("S2_MullerLyer_")
rez5 <- get_params(
illusion1_verticalhorizontal_err,
data = filter(df, Illusion_Type == "VerticalHorizontal", Participant == sub),
prior_scale = prior_scale) |>
data_addprefix("S2_VerticalHorizontal_")
rez6 <- get_params(
illusion1_verticalhorizontal_rt,
data = filter(df, Illusion_Type == "VerticalHorizontal", Participant == sub),
prior_scale = prior_scale) |>
data_addprefix("S2_VerticalHorizontal_")
rez <- cbind(rez1, rez2, rez3, rez4, rez5, rez6)
rez
rez$Participant <- sub
out <- merge(out, rez, by="Participant")
source("~/.active-rstudio-document", echo=TRUE)
out <- data.frame(Participant = "S0")
out <- merge(out, rez, by="Participant")
out
out <- full_join(out, rez, by="Participant")
out <- data.frame(Participant = "S0")
out <- full_join(out, rez, by="Participant")
out
get_params <- function(model, data, prior_scale = 1) {
family <- insight::find_response(model)
f <- insight::find_formula(model)
priors <- bayestestR::model_to_priors(model,
scale_multiply = prior_scale)
priors <- brms::validate_prior(priors[1:9, ],
f$conditional,
data=data)
m <- update(model, formula=f$conditional, newdata=data, prior=priors, refresh=0)
parameters::parameters(m) |>
filter(str_detect(Parameter, "Illusion_EffectIncongruent:")) |>
mutate(Parameter = case_when(
str_detect(Parameter, "Illusion_Difference:") ~ "Interaction",
str_detect(Parameter, "_Strength") ~ "Strength",
TRUE ~ "Diff"
)) |>
select(Parameter, Median) |>
pivot_wider(names_from = "Parameter", values_from = "Median") |>
data_addsuffix(paste0("_", family, "_P", prior_scale))
}
out <- data.frame(Participant = "S0")
for(sub in unique(df$Participant)[1:4]) {
print(sub)
for(prior_scale in 1:3) {
print(paste0("  ", prior_scale))
rez1 <- get_params(
illusion1_ebbinghaus_err,
data = filter(df, Illusion_Type == "Ebbinghaus", Participant == sub),
prior_scale = prior_scale) |>
data_addprefix("S2_Ebbinghaus_")
rez2 <- get_params(
illusion1_ebbinghaus_rt,
data = filter(df, Illusion_Type == "Ebbinghaus", Participant == sub),
prior_scale = prior_scale) |>
data_addprefix("S2_Ebbinghaus_")
rez3 <- get_params(
illusion1_mullerlyer_err,
data = filter(df, Illusion_Type == "MullerLyer", Participant == sub),
prior_scale = prior_scale) |>
data_addprefix("S2_MullerLyer_")
rez4 <- get_params(
illusion1_mullerlyer_rt,
data = filter(df, Illusion_Type == "MullerLyer", Participant == sub),
prior_scale = prior_scale) |>
data_addprefix("S2_MullerLyer_")
rez5 <- get_params(
illusion1_verticalhorizontal_err,
data = filter(df, Illusion_Type == "VerticalHorizontal", Participant == sub),
prior_scale = prior_scale) |>
data_addprefix("S2_VerticalHorizontal_")
rez6 <- get_params(
illusion1_verticalhorizontal_rt,
data = filter(df, Illusion_Type == "VerticalHorizontal", Participant == sub),
prior_scale = prior_scale) |>
data_addprefix("S2_VerticalHorizontal_")
rez <- cbind(rez1, rez2, rez3, rez4, rez5, rez6)
rez$Participant <- sub
out <- full_join(out, rez, by="Participant")
}
}
get_params <- function(model, data, prior_scale = 1) {
family <- insight::find_response(model)
f <- insight::find_formula(model)
priors <- bayestestR::model_to_priors(model,
scale_multiply = prior_scale)
priors <- brms::validate_prior(priors[1:9, ],
f$conditional,
data=data)
e <- suppressWarnings(suppressMessages(
m <- update(model, formula=f$conditional, newdata=data, prior=priors, refresh=0)
))
parameters::parameters(m) |>
filter(str_detect(Parameter, "Illusion_EffectIncongruent:")) |>
mutate(Parameter = case_when(
str_detect(Parameter, "Illusion_Difference:") ~ "Interaction",
str_detect(Parameter, "_Strength") ~ "Strength",
TRUE ~ "Diff"
)) |>
select(Parameter, Median) |>
pivot_wider(names_from = "Parameter", values_from = "Median") |>
data_addsuffix(paste0("_", family, "_P", prior_scale))
}
rez1 <- get_params(
illusion1_ebbinghaus_err,
data = filter(df, Illusion_Type == "Ebbinghaus", Participant == sub),
prior_scale = prior_scale) |>
data_addprefix("S2_Ebbinghaus_")
get_params <- function(model, data, prior_scale = 1) {
family <- insight::find_response(model)
f <- insight::find_formula(model)
priors <- bayestestR::model_to_priors(model,
scale_multiply = prior_scale)
priors <- brms::validate_prior(priors[1:9, ],
f$conditional,
data=data)
e <- suppressWarnings(s <- suppressMessages(
m <- update(model, formula=f$conditional, newdata=data, prior=priors, refresh=0)
))
parameters::parameters(m) |>
filter(str_detect(Parameter, "Illusion_EffectIncongruent:")) |>
mutate(Parameter = case_when(
str_detect(Parameter, "Illusion_Difference:") ~ "Interaction",
str_detect(Parameter, "_Strength") ~ "Strength",
TRUE ~ "Diff"
)) |>
select(Parameter, Median) |>
pivot_wider(names_from = "Parameter", values_from = "Median") |>
data_addsuffix(paste0("_", family, "_P", prior_scale))
}
rez1 <- get_params(
illusion1_ebbinghaus_err,
data = filter(df, Illusion_Type == "Ebbinghaus", Participant == sub),
prior_scale = prior_scale) |>
data_addprefix("S2_Ebbinghaus_")
get_params <- function(model, data, prior_scale = 1) {
family <- insight::find_response(model)
f <- insight::find_formula(model)
priors <- bayestestR::model_to_priors(model,
scale_multiply = prior_scale)
priors <- brms::validate_prior(priors[1:9, ],
f$conditional,
data=data)
m <- update(model, formula=f$conditional, newdata=data, prior=priors, refresh=0, silent=2)
parameters::parameters(m) |>
filter(str_detect(Parameter, "Illusion_EffectIncongruent:")) |>
mutate(Parameter = case_when(
str_detect(Parameter, "Illusion_Difference:") ~ "Interaction",
str_detect(Parameter, "_Strength") ~ "Strength",
TRUE ~ "Diff"
)) |>
select(Parameter, Median) |>
pivot_wider(names_from = "Parameter", values_from = "Median") |>
data_addsuffix(paste0("_", family, "_P", prior_scale))
}
rez1 <- get_params(
illusion1_ebbinghaus_err,
data = filter(df, Illusion_Type == "Ebbinghaus", Participant == sub),
prior_scale = prior_scale) |>
data_addprefix("S2_Ebbinghaus_")
get_params <- function(model, data, prior_scale = 1) {
family <- insight::find_response(model)
f <- insight::find_formula(model)
priors <- bayestestR::model_to_priors(model,
scale_multiply = prior_scale)
priors <- brms::validate_prior(priors[1:9, ],
f$conditional,
data=data)
s <- capture.output(
m <- update(model, formula=f$conditional, newdata=data, prior=priors, refresh=0, silent=0)
)
parameters::parameters(m) |>
filter(str_detect(Parameter, "Illusion_EffectIncongruent:")) |>
mutate(Parameter = case_when(
str_detect(Parameter, "Illusion_Difference:") ~ "Interaction",
str_detect(Parameter, "_Strength") ~ "Strength",
TRUE ~ "Diff"
)) |>
select(Parameter, Median) |>
pivot_wider(names_from = "Parameter", values_from = "Median") |>
data_addsuffix(paste0("_", family, "_P", prior_scale))
}
rez1 <- get_params(
illusion1_ebbinghaus_err,
data = filter(df, Illusion_Type == "Ebbinghaus", Participant == sub),
prior_scale = prior_scale) |>
data_addprefix("S2_Ebbinghaus_")
get_params <- function(model, data, prior_scale = 1) {
family <- insight::find_response(model)
f <- insight::find_formula(model)
priors <- bayestestR::model_to_priors(model,
scale_multiply = prior_scale)
priors <- brms::validate_prior(priors[1:9, ],
f$conditional,
data=data)
s <- capture.output(suppressMessages(
m <- update(model, formula=f$conditional, newdata=data, prior=priors, refresh=0, silent=0)
))
parameters::parameters(m) |>
filter(str_detect(Parameter, "Illusion_EffectIncongruent:")) |>
mutate(Parameter = case_when(
str_detect(Parameter, "Illusion_Difference:") ~ "Interaction",
str_detect(Parameter, "_Strength") ~ "Strength",
TRUE ~ "Diff"
)) |>
select(Parameter, Median) |>
pivot_wider(names_from = "Parameter", values_from = "Median") |>
data_addsuffix(paste0("_", family, "_P", prior_scale))
}
rez1 <- get_params(
illusion1_ebbinghaus_err,
data = filter(df, Illusion_Type == "Ebbinghaus", Participant == sub),
prior_scale = prior_scale) |>
data_addprefix("S2_Ebbinghaus_")
get_params <- function(model, data, prior_scale = 1) {
family <- insight::find_response(model)
f <- insight::find_formula(model)
priors <- bayestestR::model_to_priors(model,
scale_multiply = prior_scale)
priors <- brms::validate_prior(priors[1:9, ],
f$conditional,
data=data)
s <- capture.output(suppressMessages(
m <- update(model, formula=f$conditional, newdata=data, prior=priors, refresh=0, silent=0)
))
parameters::parameters(m) |>
filter(str_detect(Parameter, "Illusion_EffectIncongruent:")) |>
mutate(Parameter = case_when(
str_detect(Parameter, "Illusion_Difference:") ~ "Interaction",
str_detect(Parameter, "_Strength") ~ "Strength",
TRUE ~ "Diff"
)) |>
select(Parameter, Median) |>
pivot_wider(names_from = "Parameter", values_from = "Median") |>
data_addsuffix(paste0("_", family))
}
out <- data.frame(Participant = NA, PriorScale = NA)
for(sub in unique(df$Participant)) {
print(sub)
for(prior_scale in 1:3) {
print(paste0("  ", prior_scale))
rez1 <- get_params(
illusion1_ebbinghaus_err,
data = filter(df, Illusion_Type == "Ebbinghaus", Participant == sub),
prior_scale = prior_scale) |>
data_addprefix("S2_Ebbinghaus_")
rez2 <- get_params(
illusion1_ebbinghaus_rt,
data = filter(df, Illusion_Type == "Ebbinghaus", Participant == sub),
prior_scale = prior_scale) |>
data_addprefix("S2_Ebbinghaus_")
rez3 <- get_params(
illusion1_mullerlyer_err,
data = filter(df, Illusion_Type == "MullerLyer", Participant == sub),
prior_scale = prior_scale) |>
data_addprefix("S2_MullerLyer_")
rez4 <- get_params(
illusion1_mullerlyer_rt,
data = filter(df, Illusion_Type == "MullerLyer", Participant == sub),
prior_scale = prior_scale) |>
data_addprefix("S2_MullerLyer_")
rez5 <- get_params(
illusion1_verticalhorizontal_err,
data = filter(df, Illusion_Type == "VerticalHorizontal", Participant == sub),
prior_scale = prior_scale) |>
data_addprefix("S2_VerticalHorizontal_")
rez6 <- get_params(
illusion1_verticalhorizontal_rt,
data = filter(df, Illusion_Type == "VerticalHorizontal", Participant == sub),
prior_scale = prior_scale) |>
data_addprefix("S2_VerticalHorizontal_")
rez <- cbind(rez1, rez2, rez3, rez4, rez5, rez6)
rez$Participant <- sub
rez$PriorScale <- prior_scale
out <- full_join(out, rez, by="Participant")
}
}
sub
df <- read.csv("data/preprocessed_illusion1.csv") |>
mutate(
Block = as.factor(Block),
Illusion_Side = as.factor(Illusion_Side)
)
unique(df$Participant)
out
out <- data.frame()
for(sub in unique(df$Participant)[1:2]) {
print(sub)
for(prior_scale in 1:3) {
print(paste0("  ", prior_scale))
rez1 <- get_params(
illusion1_ebbinghaus_err,
data = filter(df, Illusion_Type == "Ebbinghaus", Participant == sub),
prior_scale = prior_scale) |>
data_addprefix("S2_Ebbinghaus_")
rez2 <- get_params(
illusion1_ebbinghaus_rt,
data = filter(df, Illusion_Type == "Ebbinghaus", Participant == sub),
prior_scale = prior_scale) |>
data_addprefix("S2_Ebbinghaus_")
rez3 <- get_params(
illusion1_mullerlyer_err,
data = filter(df, Illusion_Type == "MullerLyer", Participant == sub),
prior_scale = prior_scale) |>
data_addprefix("S2_MullerLyer_")
rez4 <- get_params(
illusion1_mullerlyer_rt,
data = filter(df, Illusion_Type == "MullerLyer", Participant == sub),
prior_scale = prior_scale) |>
data_addprefix("S2_MullerLyer_")
rez5 <- get_params(
illusion1_verticalhorizontal_err,
data = filter(df, Illusion_Type == "VerticalHorizontal", Participant == sub),
prior_scale = prior_scale) |>
data_addprefix("S2_VerticalHorizontal_")
rez6 <- get_params(
illusion1_verticalhorizontal_rt,
data = filter(df, Illusion_Type == "VerticalHorizontal", Participant == sub),
prior_scale = prior_scale) |>
data_addprefix("S2_VerticalHorizontal_")
rez <- cbind(rez1, rez2, rez3, rez4, rez5, rez6)
rez$Participant <- sub
rez$PriorScale <- prior_scale
out <- rbind(out, rez)
}
}
out
write.csv(out, "data/scores_individual.csv", row.names = FALSE)
