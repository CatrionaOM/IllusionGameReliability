# Session2
participants <- list.files(paste0(rawdata_folder, "session2/"), pattern = "IllusionGameReliability")
df2 <- data.frame()
for (ppt in participants) {
print(paste0("Session 2: ", ppt))
df2 <- rbind(df2,
preprocess(paste0(rawdata_folder, "/session2/", ppt)))
}
# Not sure what to do with this now, let's wait
prolific2 <- get_prolific(paste0(rawdata_folder, "session2/"))
# Format Data ============================================================
illusion1 <- df1 |>
filter(Task == "Illusion_Session1") |>
clean_task()
perceptual <- df1 |>
filter(Task == "Perceptual") |>
clean_task()
illusion2 <- df2 |>
filter(Task == "Illusion_Session2") |>
clean_task()
sub <- clean_scales(df1, df2, prolific1, prolific2)
# Fix demographics
unique(sub$Sex)
unique(sub$Nationality)
unique(sub$Country)
unique(sub$Ethnicity)
unique(sub$Prolific_Ethnicity)
sub$Ethnicity <- case_when(
sub$Ethnicity == "Latin" ~ "Hispanic",
sub$Ethnicity == "Black" ~ "African",
TRUE ~ sub$Ethnicity
)
# Anonymize ---------------------------------------------------------------
all_participants <- sub[order(sub$Prolific_Started), "Participant"]
all_participants
if(length(setdiff(unique(illusion1$Participant), all_participants)) > 0) {
stop("Some participants from illusion1 are not in prolific data")
}
if(length(setdiff(all_participants, unique(illusion1$Participant))) > 0) {
stop("Some participants from prolific are not in illusion 1")
}
if(length(setdiff(unique(perceptual$Participant), all_participants)) > 0) {
stop("Some participants from perceptual are not in prolific data")
}
if(length(setdiff(unique(illusion2$Participant), all_participants)) > 0) {
stop("Some participants from illusion2 are not in prolific data")
}
sprintf("S%03d", 1:length(all_participants))
names(all_participants) <- sprintf("S%03d", 1:length(all_participants))
all_participants
all_participants[illusion1$Participant]
newnames <- sprintf("S%03d", 1:length(all_participants))
names(newnames) <- all_participants
newnames[illusion1$Participant]
as.character(newnames[illusion1$Participant])
illusion1$Participant <- as.character(newnames[illusion1$Participant])
illusion1$Participant <- as.character(newnames[illusion1$Participant])
illusion2$Participant <- as.character(newnames[illusion2$Participant])
perceptual$Participant <- as.character(newnames[perceptual$Participant])
sub$Participant <- as.character(newnames[sub$Participant])
# Folder of the local github where the public data is going to be saved in
save_folder  <- "C:/Dropbox/RECHERCHE/Studies/IllusionGameReliability/data/"
library(tidyverse)
library(lubridate)
# Utility Functions =====================================================
format_fixationcross <- function(x) {
# Get fixation cross position
fix <- data.frame(x = gsub(";", ">", (gsub("<p style=\"color: black; font-size: 80px; ", "", x)))) |>
tidyr::separate(
col = x,
into = c("Padding_Left", "Padding_Right", "Padding_Top", "Padding_Bottom"),
sep = "> "
) |>
mutate_all(function(x) as.numeric(str_extract(x, "[0-9]+")))
data.frame(
FixationCross_Left = fix$Padding_Right - fix$Padding_Left,
FixationCross_Top = fix$Padding_Bottom - fix$Padding_Top
)
}
session1_task <- function(data) {
if ("1" %in% data$condition) {  # 1: Illusion task first
illusion <- data[which(data$screen == "practice_debrief"):which(data$screen == "break1"), ]
illusion$Task_Order <- 1
perceptual <- data[which(data$screen == "perceptual_instructions"):nrow(data), ]
perceptual$Task_Order <- 2
} else {  # 1: Perceptual task first
perceptual <- data[which(data$screen == "perceptual_instructions"):which(data$screen == "break1"), ]
perceptual$Task_Order <- 1
illusion <- data[which(data$screen == "practice_debrief"):nrow(data), ]
illusion$Task_Order <- 2
}
illusion$Task <- "Illusion_Session1"
perceptual$Task <- "Perceptual"
trials <- rbind(illusion, perceptual)
# Get fixation cross data
isi <- as.numeric(trials[trials$screen == "fixation" & !is.na(trials$screen), "trial_duration"])
fixation <- format_fixationcross(trials[trials$screen == "fixation", "stimulus"])
rbind(illusion, perceptual) |>
dplyr::filter(screen == "Trial") |>
cbind(fixation) |>
mutate(ISI = isi)
}
session1_scales <- function(data) {
df <- data.frame(Participant = data$participant_id[1])
# IPIP6
ipip6 <- as.data.frame(jsonlite::fromJSON(data[data$screen == "IPIP6", "response"]))
ipip6[grepl("_R", names(ipip6))] <- 1 - ipip6[grepl("_R", names(ipip6))]
df$IPIP6_Extraversion <- rowMeans(ipip6[grepl("Extraversion", names(ipip6))])
df$IPIP6_Conscientiousness <- rowMeans(ipip6[grepl("Conscientiousness", names(ipip6))])
df$IPIP6_Neuroticism <- rowMeans(ipip6[grepl("Neuroticism", names(ipip6))])
df$IPIP6_Openness <- rowMeans(ipip6[grepl("Openness", names(ipip6))])
df$IPIP6_HonestyHumility <- rowMeans(ipip6[grepl("HonestyHumility", names(ipip6))])
df$IPIP6_Agreeableness <- rowMeans(ipip6[grepl("Agreeableness", names(ipip6))])
df$IPIP6_SD <- mean(c(
sd(ipip6[grepl("Extraversion", names(ipip6))]),
sd(ipip6[grepl("Conscientiousness", names(ipip6))]),
sd(ipip6[grepl("Neuroticism", names(ipip6))]),
sd(ipip6[grepl("Openness", names(ipip6))]),
sd(ipip6[grepl("HonestyHumility", names(ipip6))]),
sd(ipip6[grepl("Agreeableness", names(ipip6))])
))
names(ipip6) <- str_replace(str_remove(paste0("Item_IPIP6_", names(ipip6)), "_R"), "Attention_Check", "AttentionCheck")
items <- ipip6
# PID5
pid5 <- as.data.frame(jsonlite::fromJSON(data[data$screen == "PID5_SF", "response"]))
df$PID5_Disinhibition <- rowMeans(pid5[grepl("Disinhibition", names(pid5))])
df$PID5_Detachment <- rowMeans(pid5[grepl("Detachment", names(pid5))])
df$PID5_NegativeAffect <- rowMeans(pid5[grepl("NegativeAffect", names(pid5))])
df$PID5_Antagonism <- rowMeans(pid5[grepl("Antagonism", names(pid5))])
df$PID5_Psychoticism <- rowMeans(pid5[grepl("Psychoticism", names(pid5))])
df$PID5_SD <- mean(c(
sd(pid5[grepl("Disinhibition", names(pid5))]),
sd(pid5[grepl("Detachment", names(pid5))]),
sd(pid5[grepl("NegativeAffect", names(pid5))]),
sd(pid5[grepl("Antagonism", names(pid5))]),
sd(pid5[grepl("Psychoticism", names(pid5))])
))
names(pid5) <- str_replace(paste0("Item_PID5_", names(pid5)), "Attention_Check", "AttentionCheck")
items <- cbind(items, pid5)
# PHQ-4
phq4 <- as.data.frame(jsonlite::fromJSON(data[data$screen == "PHQ_4", "response"]))
df$PHQ4_Anxiety <- rowMeans(phq4[grepl("Anxiety", names(phq4))])
df$PHQ4_Depression <- rowMeans(phq4[grepl("Depression", names(phq4))])
names(phq4) <- paste0("Item_PHQ4_", names(phq4))
items <- cbind(items, phq4)
# ASQ-28
asq28 <- as.data.frame(jsonlite::fromJSON(data[data$screen == "AQ28", "response"]))
df$ASQ28_SocialSkills <- rowMeans(asq28[grepl("SocialSkills", names(asq28))])
df$ASQ28_Routine <- rowMeans(asq28[grepl("Routine", names(asq28))])
df$ASQ28_Imagination <- rowMeans(asq28[grepl("Imagination", names(asq28))])
df$ASQ28_Switching <- rowMeans(asq28[grepl("Switching", names(asq28))])
df$ASQ28_Patterns <- rowMeans(asq28[grepl("Patterns", names(asq28))])
df$ASQ28_SD <- mean(c(
sd(asq28[grepl("SocialSkills", names(asq28))]),
sd(asq28[grepl("Routine", names(asq28))]),
sd(asq28[grepl("Imagination", names(asq28))]),
sd(asq28[grepl("Switching", names(asq28))]),
sd(asq28[grepl("Patterns", names(asq28))])
))
names(asq28) <- str_replace(paste0("Item_ASQ4_", names(asq28)), "Attention_Check", "AttentionCheck")
items <- cbind(items, asq28)
# SPQ
spq <- as.data.frame(jsonlite::fromJSON(data[data$screen == "SPQ_BRU", "response"]))
df$SPQ_MagicalThinking <- rowMeans(spq[grepl("MagicalThinking", names(spq))])
df$SPQ_UnusualPerceptions <- rowMeans(spq[grepl("UnusualPerceptions", names(spq))])
df$SPQ_Eccentric <- rowMeans(spq[grepl("Eccentric", names(spq))])
df$SPQ_OddSpeech <- rowMeans(spq[grepl("OddSpeech", names(spq))])
df$SPQ_ConstrictedAffect <- rowMeans(spq[grepl("ConstrictedAffect", names(spq))])
df$SPQ_Reference <- rowMeans(spq[grepl("Reference", names(spq))])
df$SPQ_NoCloseFriends <- rowMeans(spq[grepl("NoCloseFriends", names(spq))])
df$SPQ_SocialAnxiety <- rowMeans(spq[grepl("SocialAnxiety", names(spq))])
df$SPQ_Suspiciousness <- rowMeans(spq[grepl("Suspiciousness", names(spq))])
df$SPQ_SD <- mean(c(
sd(spq[grepl("MagicalThinking", names(spq))]),
sd(spq[grepl("UnusualPerceptions", names(spq))]),
sd(spq[grepl("Eccentric", names(spq))]),
sd(spq[grepl("OddSpeech", names(spq))]),
sd(spq[grepl("ConstrictedAffect", names(spq))]),
sd(spq[grepl("Reference", names(spq))]),
sd(spq[grepl("NoCloseFriends", names(spq))]),
sd(spq[grepl("SocialAnxiety", names(spq))]),
sd(spq[grepl("Suspiciousness", names(spq))])
))
names(spq) <- str_replace(paste0("Item_SPQ_", names(spq)), "Attention_Check", "AttentionCheck")
items <- cbind(items, spq)
# IAS
ias <- as.data.frame(jsonlite::fromJSON(data[data$screen == "IAS_R", "response"]))
df$IAS_Nociception <- rowMeans(ias[grepl("Nociception", names(ias))])
df$IAS_Skin <- rowMeans(ias[grepl("Skin", names(ias))])
df$IAS_Elimination <- rowMeans(ias[grepl("Elimination", names(ias))])
df$IAS_Interoception <- rowMeans(ias[grepl("Interoception", names(ias))])
df$IAS_Expulsion <- rowMeans(ias[grepl("Expulsion", names(ias))])
names(ias) <- str_replace(paste0("Item_IAS_", names(ias)), "Attention_Check", "AttentionCheck")
items <- cbind(items, ias)
# LIE
lie <- as.data.frame(jsonlite::fromJSON(data[data$screen == "LIE", "response"]))
df$LIE_Contextuality <- rowMeans(lie[grepl("Contextuality", names(lie))])
df$LIE_Ability <- rowMeans(lie[grepl("Ability", names(lie))])
df$LIE_Negativity <- rowMeans(lie[grepl("Negativity", names(lie))])
df$LIE_Frequency <- rowMeans(lie[grepl("Frequency", names(lie))])
df$LIE_SD <- mean(c(
sd(lie[grepl("Contextuality", names(lie))]),
sd(lie[grepl("Ability", names(lie))]),
sd(lie[grepl("Negativity", names(lie))]),
sd(lie[grepl("Frequency", names(lie))])
))
names(lie) <- str_replace(paste0("Item_LIE_", names(lie)), "Attention_Check", "AttentionCheck")
items <- cbind(items, lie)
# GCBS (conspiracy)
gcbs <- as.data.frame(jsonlite::fromJSON(data[data$screen == "GCBS", "response"]))
df$GCBS_GovernmentMalfeasance <- rowMeans(gcbs[grepl("GM", names(gcbs))])
df$GCBS_Extraterrestrial <- rowMeans(gcbs[grepl("ET", names(gcbs))])
df$GCBS_GlobalConspiracies <- rowMeans(gcbs[grepl("MG", names(gcbs))])
df$GCBS_PersonalWellbeing <- rowMeans(gcbs[grepl("PW", names(gcbs))])
df$GCBS_InformationControl <- rowMeans(gcbs[grepl("CI", names(gcbs))])
df$GCBS_Total <- rowMeans(gcbs[!grepl("Attention", names(gcbs))])
df$GCBS_SD <- mean(c(
sd(gcbs[grepl("GM", names(gcbs))]),
sd(gcbs[grepl("ET", names(gcbs))]),
sd(gcbs[grepl("MG", names(gcbs))]),
sd(gcbs[grepl("PW", names(gcbs))]),
sd(gcbs[grepl("CI", names(gcbs))])
))
names(gcbs) <- str_replace(paste0("Item_GCBS_", names(gcbs)), "Attention_Check", "AttentionCheck")
items <- cbind(items, gcbs)
# Attention Check Items
### IPIP6, IAS and LIE responses are measured on a visual analog scale
### NOTE: jsPSych records Likert values from 0 (not 1)
df$AttentionCheck_1 <- items$Item_IPIP6_AttentionCheck_1
df$AttentionCheck_2 <- items$Item_PID5_AttentionCheck_2 / 3
df$AttentionCheck_3 <- items$Item_SPQ_AttentionCheck_3 / 4
df$AttentionCheck_4 <- abs(items$Item_ASQ4_AttentionCheck_4 - 1)
df$AttentionCheck_5 <- items$Item_IAS_AttentionCheck_5
df$AttentionCheck_6 <- abs(items$Item_GCBS_AttentionCheck_6 - 1)
df$AttentionCheck_7 <- items$Item_LIE_AttentionCheck_7
df$AttentionCheck_Session1 <- rowMeans(df[grepl("AttentionCheck", names(df))])
cbind(df, items[!grepl("AttentionCheck", names(items))])
}
#-------------------- Get Session 2 Data ------------------#
session2_task <- function(data) {
# Filter Practice Trials
trials <- data[which(data$screen == "practice_debrief"):which(data$screen == "break1"), ]
trials$Task_Order <- NA
trials$Task <- "Illusion_Session2"
# Get fixation cross data
isi <- as.numeric(trials[trials$screen == "fixation" & !is.na(trials$screen), "trial_duration"])
fixation <- format_fixationcross(trials[trials$screen == "fixation", "stimulus"])
trials |>
dplyr::filter(screen == "Trial") |>
cbind(fixation) |>
mutate(ISI = isi)
}
session2_scales <- function(data) {
df <- data.frame(Participant = data$participant_id[1])
# MAIA
maia <- as.data.frame(jsonlite::fromJSON(data[data$screen == "MAIA", "response"]))
maia[grepl("_R", names(maia))] <- 1 - maia[grepl("_R", names(maia))]
df$MAIA_Noticing <- rowMeans(maia[grepl("Noticing", names(maia))])
df$MAIA_NotDistracting <- rowMeans(maia[grepl("NotDistracting", names(maia))])
df$MAIA_NotWorrying <- rowMeans(maia[grepl("NotWorrying", names(maia))])
df$MAIA_AttentionRegulation <- rowMeans(maia[grepl("AttentionRegulation", names(maia))])
df$MAIA_EmotionalAwareness <- rowMeans(maia[grepl("EmotionalAwareness", names(maia))])
df$MAIA_SelfRegulation <- rowMeans(maia[grepl("SelfRegulation", names(maia))])
df$MAIA_BodyListening <- rowMeans(maia[grepl("BodyListening", names(maia))])
df$MAIA_Trusting <- rowMeans(maia[grepl("Trusting", names(maia))])
df$MAIA_SD <- mean(c(
sd(maia[grepl("Noticing", names(maia))]),
sd(maia[grepl("NotDistracting", names(maia))]),
sd(maia[grepl("NotWorrying", names(maia))]),
sd(maia[grepl("AttentionRegulation", names(maia))]),
sd(maia[grepl("EmotionalAwareness", names(maia))]),
sd(maia[grepl("SelfRegulation", names(maia))]),
sd(maia[grepl("BodyListening", names(maia))]),
sd(maia[grepl("Trusting", names(maia))])
))
names(maia) <- str_replace(str_remove(paste0("Item_MAIA_", names(maia)), "_R"), "Attention_Check", "AttentionCheck")
items <- maia
# BPD
bpd <- as.data.frame(jsonlite::fromJSON(data[data$screen == "MSI_BPD", "response"]))
df$BPD <- rowMeans(bpd[grepl("MSI_", names(bpd))])
df$BPD_SD <- sd(bpd[grepl("MSI_", names(bpd))])
names(bpd) <- str_remove(str_replace(paste0("Item_BPD_", names(bpd)), "Attention_Check", "AttentionCheck"), "_MSI")
items <- cbind(items, bpd)
# PI-18
pi18 <- as.data.frame(jsonlite::fromJSON(data[data$screen == "PI_18", "response"]))
pi18[grepl("_R", names(pi18))] <- 5 - pi18[grepl("_R", names(pi18))]
df$PI_Enticing <- rowMeans(pi18[grepl("GE_", names(pi18))])
df$PI_Alive <- rowMeans(pi18[grepl("A_", names(pi18))])
df$PI_Safe <- rowMeans(pi18[grepl("GS_", names(pi18))])
df$PI_Good <- rowMeans(pi18[grepl("G", names(pi18))])
df$PI_Changing <- rowMeans(pi18[grepl("Changing", names(pi18))])
df$PI_Hierarchical <- rowMeans(pi18[grepl("Hierarchical", names(pi18))])
df$PI_Understandable <- rowMeans(pi18[grepl("Understandable", names(pi18))])
df$PI_SD <- mean(c(
sd(pi18[grepl("GE_", names(pi18))]),
sd(pi18[grepl("A_", names(pi18))]),
sd(pi18[grepl("GS_", names(pi18))]),
sd(pi18[grepl("Changing", names(pi18))]),
sd(pi18[grepl("Hierarchical", names(pi18))]),
sd(pi18[grepl("Understandable", names(pi18))])
))
names(pi18) <- str_replace(paste0("Item_PI_", names(pi18)), "Attention_Check", "AttentionCheck")
items <- cbind(items, pi18)
# Attention Check
### MAIA and BPD are measured on visual analog scales
df$AttentionCheck_8 <- items$Item_MAIA_AttentionCheck_1
df$AttentionCheck_9 <- items$Item_BPD_AttentionCheck_2
df$AttentionCheck_10 <- items$Item_PI_AttentionCheck_3 / 5
df$AttentionCheck_Session2 <- rowMeans(df[grepl("AttentionCheck", names(df))])
cbind(df, items[!grepl("AttentionCheck", names(items))])
}
# ============ Preprocessing Function ===========================#
preprocess <- function(file) {
data <- read.csv(file)
if (!"final_results" %in% data$screen) {
print("  - Warning: Incomplete data!")
return(data.frame())
}
# Get info
info <- data[data$screen == "browser_info" & !is.na(data$screen), ]
# Session 1 or 2
if (!is.null(data$condition)) {
trials <- session1_task(data)
scales <- session1_scales(data)
# Get Demographics and Browser Info
dem <- data[data$screen == "demographics" & !is.na(data$screen), "response"]
df <- data.frame(
Participant = trials$participant_id[1],
Age = as.numeric(jsonlite::fromJSON(dem[1])$age),
Sex = jsonlite::fromJSON(dem[2])$sex,
Education = jsonlite::fromJSON(dem[2])$education,
Ethnicity = trimws(tools::toTitleCase(jsonlite::fromJSON(dem[1])$ethnicity))
)
} else {
trials <- session2_task(data)
scales <- session2_scales(data)
df <- data.frame(
Participant = trials$participant_id[1]
)
}
merge(df, cbind(trials, scales), by="Participant") |>
cbind(
data.frame(
Date = ifelse(is.null(info$date), NA, info$date),
Time = ifelse(is.null(info$time), NA, info$time),
Duration = as.numeric(data[data$screen == "final_results", "time_elapsed"]) / 1000 / 60,
Screen_Resolution = paste0(trials$screen_width, "x", trials$screen_height),
Screen_Size = (as.numeric(trials$screen_width) / 1000) * (as.numeric(trials$screen_height) / 1000),
Screen_Refresh = trials$vsync_rate,
Browser = trials$browser,
Browser_Version = trials$browser_version,
Device = ifelse(trials$mobile == TRUE, "Mobile", "Desktop"),
Device_OS = trials$os,
Illusion_Type = trials$type,
Block = as.numeric(trials$block_number),
Trial = as.numeric(trials$trial_number),
Stimulus = gsub(".png", "", gsub("stimuli/", "", trials$stimulus)),
Illusion_Strength = as.numeric(trials$illusion_strength),
Illusion_Effect = ifelse(sign(as.numeric(trials$illusion_strength)) == -1, "Congruent", "Incongruent"),
Illusion_Side = as.factor(sign(as.numeric(trials$illusion_difference))),
Illusion_Difference = abs(as.numeric(trials$illusion_difference)),
Answer = gsub("arrow", "", trials$response),
Error = as.integer(!as.logical(trials$correct))
)
)
}
get_prolific <- function(folder) {
prolific_files <- list.files(folder, pattern = "prolific")
df <- data.frame()
for(file in prolific_files) {
df <- read.csv(paste0(folder, file)) |>
select(Participant = Participant.id,
Prolific_Started = Started.at,
Prolific_Completed = Completed.at,
Prolific_Age = Age,
Prolific_Sex = Sex,
Prolific_Ethnicity = Ethnicity.simplified,
Nationality = Nationality,
Country = Country.of.residence,
Student = Student.status) |>
rbind(df)
df <- df[!duplicated(df), ]
}
df
}
clean_task <- function(df) {
df |>
select(Participant,
Task,
Task_Order,
Date,
Time,
Duration,
Screen_Resolution,
Screen_Size,
Screen_Refresh,
Browser,
Browser_Version,
Device_OS,
Illusion_Type,
Block,
Trial,
Stimulus,
Illusion_Strength,
Illusion_Effect,
Illusion_Side,
Illusion_Difference,
Answer,
Error,
RT = rt) |>
mutate(Participant = str_remove(Participant, "\\_.*"))
}
clean_scales <- function(df1, df2, prolific1, prolific2) {
sub1 <- df1 |>
select(Participant, Age, Sex, Education, Ethnicity,
starts_with("Item_")) |>
group_by(Participant) |>
slice(1) |>
mutate(Participant = str_remove(Participant, "\\_.*"))
sub2 <- df2 |>
select(Participant,
starts_with("MAIA"),
starts_with("Item_")) |>
group_by(Participant) |>
slice(1) |>
mutate(Participant = str_remove(Participant, "\\_.*"))
sub <- left_join(sub1, sub2, by = "Participant")
if(length(setdiff(sub$Participant, prolific1$Participant)) > 0) {
stop("Participant (session 1) not in prolific data!")
}
if(length(setdiff(prolific1$Participant, sub$Participant)) > 0) {
stop("Participant (session 1) in prolific data but no trials!")
}
merge(sub, prolific1, by = "Participant") |>
left_join(select(prolific2, Participant, Session2 = Prolific_Started), by = "Participant") |>
mutate(Interval = as.numeric(as.duration(as_datetime(Session2) - as_datetime(Prolific_Started))) / 60 / 60 / 24) |>
select(sort(tidyselect::peek_vars())) |>
datawizard::data_relocate(c("Participant", "Nationality", "Country", "Age", "Prolific_Age", "Ethnicity", "Prolific_Ethnicity", "Prolific_Started", "Interval", "Session2")) |>
datawizard::data_relocate(starts_with("Item"), after=-1)
}
# Assemble Data ============================================================
# This must indicate a local folder with the raw data
# rawdata_folder <- "C:/Users/anshu/Dropbox/IllusionGameReliability/"
rawdata_folder <- "C:/Dropbox/RECHERCHE/Data/IllusionGameReliability/"
# Folder of the local github where the public data is going to be saved in
save_folder  <- "C:/Dropbox/RECHERCHE/Studies/IllusionGameReliability/data/"
# Session1
participants <- list.files(paste0(rawdata_folder, "session1/"), pattern = "IllusionGameReliability")
df1 <- data.frame()
for (ppt in participants) {
print(paste0("Session 1: ", ppt))
df1 <- rbind(df1,
preprocess(paste0(rawdata_folder, "/session1/", ppt)))
}
# Not sure what to do with this now, let's wait
prolific1 <- get_prolific(paste0(rawdata_folder, "session1/"))
# Session2
participants <- list.files(paste0(rawdata_folder, "session2/"), pattern = "IllusionGameReliability")
df2 <- data.frame()
for (ppt in participants) {
print(paste0("Session 2: ", ppt))
df2 <- rbind(df2,
preprocess(paste0(rawdata_folder, "/session2/", ppt)))
}
# Not sure what to do with this now, let's wait
prolific2 <- get_prolific(paste0(rawdata_folder, "session2/"))
# Format Data ============================================================
illusion1 <- df1 |>
filter(Task == "Illusion_Session1") |>
clean_task()
perceptual <- df1 |>
filter(Task == "Perceptual") |>
clean_task()
illusion2 <- df2 |>
filter(Task == "Illusion_Session2") |>
clean_task()
sub <- clean_scales(df1, df2, prolific1, prolific2)
# Fix demographics
# unique(sub$Sex)
# unique(sub$Nationality)
# unique(sub$Country)
# unique(sub$Ethnicity)
# unique(sub$Prolific_Ethnicity)
sub$Ethnicity <- case_when(
sub$Ethnicity == "Latin" ~ "Hispanic",
sub$Ethnicity == "Black" ~ "African",
TRUE ~ sub$Ethnicity
)
# Anonymize ---------------------------------------------------------------
all_participants <- sub[order(sub$Prolific_Started), "Participant"]
if(length(setdiff(unique(illusion1$Participant), all_participants)) > 0) {
stop("Some participants from illusion1 are not in prolific data")
}
if(length(setdiff(all_participants, unique(illusion1$Participant))) > 0) {
stop("Some participants from prolific are not in illusion 1")
}
if(length(setdiff(unique(perceptual$Participant), all_participants)) > 0) {
stop("Some participants from perceptual are not in prolific data")
}
if(length(setdiff(unique(illusion2$Participant), all_participants)) > 0) {
stop("Some participants from illusion2 are not in prolific data")
}
newnames <- sprintf("S%03d", 1:length(all_participants))
names(newnames) <- all_participants
illusion1$Participant <- as.character(newnames[illusion1$Participant])
illusion2$Participant <- as.character(newnames[illusion2$Participant])
perceptual$Participant <- as.character(newnames[perceptual$Participant])
sub$Participant <- as.character(newnames[sub$Participant])
write.csv(illusion1, paste0(save_folder, "/raw_illusion1.csv"), row.names = FALSE)
write.csv(illusion2, paste0(save_folder, "/raw_illusion2.csv"), row.names = FALSE)
write.csv(perceptual, paste0(save_folder, "/raw_perceptual.csv"), row.names = FALSE)
write.csv(sub, paste0(save_folder, "/raw_questionnaires.csv"), row.names = FALSE)
